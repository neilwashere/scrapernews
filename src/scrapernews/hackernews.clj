(ns scrapernews.hackernews
  (:require [clojure.string :as string]
            [net.cgrand.enlive-html :as html]
            [org.httpkit.client :as http]
            [scrapernews.specs :as specs]))

(def hacker-url "http://news.ycombinator.com")

;; TODO - move to utility namespace
(defn- url->dom
  "Given a URL, return a map representation of the markup.
  Will throw an ExceptionInfo with details if there is an error fetching the page."
  [url]
  {:pre [specs/valid? :scrapernews.specs/uri url]}
  (let [{:keys [body error] :as resp} @(http/get url)]
    (if error
      (throw (ex-info "Unable to get dom" {:causes error}))
      (html/html-snippet body))))

(defn- title
  [node]
  (first (html/select node [:a.storylink :> html/text])))

(defn- uri
  [node]
  (get-in (first (html/select node [:a.storylink])) [:attrs :href]))

(defn- author
  [node]
  (first (html/select node [:a.hnuser :> html/text])))

(defn- points
  [node]
  (some-> (html/select node [:span.score :> html/text])
          first
          (string/split #"\s")
          first
          read-string))

(defn- comments
  [node]
  (some-> (html/select node [:a :> html/text])
          last
          (string/split #"Â ") ; That is no ordinary underscore!
          first
          read-string))

(defn- rank
  [node]
  (-> (html/select node [:span.rank :> html/text])
      first
      (string/split #"\.")
      first
      read-string))

(defn- post-html->map
  "Takes a tupple as generated by `all-posts` and using intimate knowlege
  of how this HTML is wired, returns a map with the attributes we are interested in"
  [[link meta _]]
  {:scrapernews.specs/title     (title link)
   :scrapernews.specs/uri       (uri link)
   :scrapernews.specs/author    (author meta)
   :scrapernews.specs/points    (points meta)
   :scrapernews.specs/comments  (comments meta)
   :scrapernews.specs/rank      (rank link)})

(defn- all-posts
  "The hackernews site is a pretty good example of HTML in the early 90's.
  User stories, or posts, are split over two `tr` elements with an additional `tr`
  for some spacing. This function returns a lazy sequence of tupples representing those
  three elements"
  [dom]
  (partition 3 (html/select dom [:table.itemlist :tr])))

(defn- post-comprehension
  "Returns a LazySeq of maps (our transformed html posts)"
  [posts]
  (for [post-html posts]
    (post-html->map post-html)))

(defn- valid-post?
  [post]
  (specs/valid? :scrapernews.specs/hacker-post post))

(defn hackernews
  "Expects a map containing a :posts key with a positive integer value.
  Will return x number of posts, parsed into JSON"
  [options]
  (let [num-posts (:posts options)
        ;; posts are only potential until they have passed validation
        potential-posts (-> (url->dom hacker-url)
                            all-posts
                            post-comprehension)]
    ;; lazily consumes the intended number of posts when they are valid
    (take num-posts (filter valid-post? potential-posts))))
